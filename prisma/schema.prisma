// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  name             String?
  password         String
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  role             UserRole          @default(user)
  userProgress     UserProgress[]
  userAchievements UserAchievement[]
  UserVocabulary   UserVocabulary[]

  @@map("users")
}

model Theme {
  id              Int            @id @default(autoincrement())
  name            String         @unique
  description     String?
  imageUrl        String?        @map("image_url") // URL to theme preview image
  sceneUrl        String?        @map("scene_url") // URL to the GLB scene file
  skyboxUrl       String?        @map("skybox_url") // Optional skybox/environment map
  isLocked        Boolean        @default(false) @map("is_locked")
  requiredThemeId Int?           @map("required_theme_id")
  requiredTheme   Theme?         @relation("ThemePrerequisite", fields: [requiredThemeId], references: [id])
  dependentThemes Theme[]        @relation("ThemePrerequisite")
  objects         Object[]
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  userProgress    UserProgress[]

  @@map("themes")
}

model Object {
  id               Int          @id @default(autoincrement())
  name             String
  objectIdentifier String       @map("object_identifier") // Unique identifier matching the object name in GLB file
  thumbnailUrl     String?      @map("thumbnail_url") // Thumbnail image for object selection UI
  position         Json? // Stores x, y, z coordinates
  rotation         Json? // Stores rotation data
  scale            Json? // Stores scale data
  interactable     Boolean      @default(true)
  themeId          Int          @map("theme_id")
  theme            Theme        @relation(fields: [themeId], references: [id])
  vocabularyItems  Vocabulary[]
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")

  @@unique([objectIdentifier, themeId])
  @@map("objects")
}

model Vocabulary {
  id                    Int              @id @default(autoincrement())
  englishWord           String           @map("english_word")
  vietnameseTranslation String           @map("vietnamese_translation")
  pronunciation         String
  audioUrl              String?          @map("audio_url")
  examples              String?          @map("examples")
  objectId              Int              @map("object_id")
  object                Object           @relation(fields: [objectId], references: [id])
  createdAt             DateTime         @default(now()) @map("created_at")
  updatedAt             DateTime         @updatedAt @map("updated_at")
  userLearned           UserVocabulary[]

  @@map("vocabulary")
}

model UserProgress {
  id          Int       @id @default(autoincrement())
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id])
  themeId     Int       @map("theme_id")
  theme       Theme     @relation(fields: [themeId], references: [id])
  isCompleted Boolean   @default(false) @map("is_completed")
  progress    Float     @default(0) // Percentage of completion (0-100)
  startedAt   DateTime  @default(now()) @map("started_at")
  completedAt DateTime? @map("completed_at")

  @@unique([userId, themeId])
  @@map("user_progress")
}

model UserVocabulary {
  id           String    @id @default(uuid())
  userId       String    @map("user_id")
  user         User      @relation(fields: [userId], references: [id])
  vocabularyId Int       @map("vocabulary_id")
  learned      Boolean   @default(false)
  lastReviewed DateTime? @map("last_reviewed")
  createdAt    DateTime  @default(now()) @map("created_at")

  vocabulary Vocabulary @relation(fields: [vocabularyId], references: [id])

  @@unique([userId, vocabularyId])
  @@map("user_vocabulary")
}

model UserAchievement {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id])
  type        String // e.g., "THEME_COMPLETED", "VOCAB_MILESTONE"
  description String
  earnedAt    DateTime @default(now()) @map("earned_at")

  @@unique([userId, type])
  @@map("user_achievements")
}

enum UserRole {
  user
  admin
}
